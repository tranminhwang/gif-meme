import Head from "next/head";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";
import { Buffer } from "buffer";
import {
  Connection,
  PublicKey,
  clusterApiUrl,
  Keypair,
  SystemProgram,
} from "@solana/web3.js";
import { Program, AnchorProvider } from "@project-serum/anchor";
import kp from "../../keypair.json";

const arr = Object.values(kp._keypair.secretKey);
const secret = new Uint8Array(arr);
const baseAccount = Keypair.fromSecretKey(secret);
console.log("baseAccount", baseAccount.publicKey.toString());

const programId = new PublicKey("BjEvTzneKzB7KQyMPhZck95sEb5PTZnEEYpyAZdJ68r7");
const network = clusterApiUrl("devnet");
const opts = {
  preflightCommitment: "processed",
};

const getProvider = () => {
  const connection = new Connection(network, opts.preflightCommitment);
  const provider = new AnchorProvider(
    connection,
    window.solana,
    opts.preflightCommitment
  );
  return provider;
};

const getProgram = async () => {
  // Get metadata about your solana program
  const idl = await Program.fetchIdl(programId, getProvider());
  // Create a program that you can call
  return new Program(idl, programId, getProvider());
};

export default function Home() {
  const [walletAddress, setWalletAddress] = useState(null);
  const [listGifs, setListGifs] = useState([]);
  const inputRef = useRef(null);

  const checkIfWalletIsConnected = async () => {
    if (window?.solana?.isPhantom) {
      const response = await window.solana.connect({ onlyIfTrusted: true });
      console.log("Connected with Public Key:", response.publicKey.toString());
      setWalletAddress(response.publicKey.toString());
    } else {
      alert("Solana object not found! Get a Phantom Wallet ðŸ‘»");
    }
  };

  console.log("listGifs", listGifs);
  const connectWallet = async () => {
    const { solana } = window;
    if (solana) {
      const response = await solana.connect();
      console.log("Connected with Public Key:", response.publicKey.toString());
      setWalletAddress(response.publicKey.toString());
    }
  };

  const getGifList = async () => {
    try {
      const program = await getProgram();
      const account = await program.account.baseAccount.fetch(
        baseAccount.publicKey
      );

      console.log("Got the account", account);
      setListGifs(account.gifList);
    } catch (error) {
      console.log("Error in getGifList: ", error);
      setListGifs([]);
    }
  };

  const sendGif = async (gifUrl: string) => {
    try {
      const provider = getProvider();
      const program = await getProgram();
      await program.rpc.addGif(gifUrl, {
        accounts: {
          baseAccount: baseAccount.publicKey,
          user: provider.wallet.publicKey,
        },
      });
      getGifList();
    } catch (error) {
      console.log("Error in sendGif: ", error.message);
    }
  };

  const createGifAccount = async () => {
    try {
      const provider = getProvider();
      const program = await getProgram();

      await program.rpc.startStuffOff({
        accounts: {
          baseAccount: baseAccount.publicKey,
          user: provider.wallet.publicKey,
          systemProgram: SystemProgram.programId,
        },
        signers: [baseAccount],
      });
      console.log(
        "Created a new BaseAccount w/ address:",
        baseAccount.publicKey.toString()
      );
      await getGifList();
    } catch (error) {
      console.log("Error creating BaseAccount account:", error);
    }
  };

  const onSubmit = async (e) => {
    e.preventDefault();
    const inputValue = inputRef.current.value;
    if (!inputValue) return;
    sendGif(inputValue);
  };

  useEffect(() => {
    const onLoad = () => {
      checkIfWalletIsConnected();
    };

    window.Buffer = Buffer;
    window.addEventListener("load", onLoad);
    return () => window.removeEventListener("load", onLoad);
  }, []);

  useEffect(() => {
    if (walletAddress) {
      getGifList();
    }
  }, [walletAddress]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-screen w-full bg-gray-600">
        <div className="container h-full fluid py-8 mx-auto flex flex-col">
          <header className="w-full flex-shrink-0">
            <h1 className="text-white text-4xl font-bold text-center mb-8">
              Gif Meme
            </h1>
            <h4 className="text-lg text-center text-white">
              View your GIF meme collection in the metaverse âœ¨
            </h4>
          </header>
          {walletAddress ? (
            <>
              {listGifs.length === 0 && (
                <div className="flex-1 flex justify-center items-center">
                  <button
                    className="text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                    onClick={createGifAccount}
                  >
                    Create gif account
                  </button>
                </div>
              )}
              <div className="flex-1 flex flex-col py-12">
                <form onSubmit={onSubmit}>
                  <input
                    ref={inputRef}
                    className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-2/3 p-2.5 mb-12 mx-auto dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                    type="text"
                    placeholder="Create a new GIF meme"
                  />
                </form>
                <div className="gifs flex-1 grid grid-cols-4 gap-4">
                  {listGifs.map((gif) => (
                    <div
                      className="grid-item border rounded-lg border-white max-h-96 relative"
                      key={crypto.randomUUID()}
                    >
                      <Image
                        src={gif.gifLink}
                        alt="gif"
                        fill
                        className="object-contain"
                      />
                    </div>
                  ))}
                </div>
              </div>
            </>
          ) : (
            <div className="flex-1 flex justify-center items-center">
              <button
                className="text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                onClick={connectWallet}
              >
                Connect to Wallet
              </button>
            </div>
          )}
          <footer className="flex justify-center items-center flex-shrink-0">
            <Image
              src="https://play-lh.googleusercontent.com/x3XxTcEYG6hYRZwnWAUfMavRfNNBl8OZweUgZDf2jUJ3qjg2p91Y8MudeXumaQLily0"
              alt="tranminhwang twitter"
              width={30}
              height={30}
              style={{ borderRadius: "50%" }}
            />
            <a
              href="https://twitter.com/tranminhwang"
              target="_blank"
              className="text-white font-bold text-lg ml-2"
            >
              build on @tranminhwang
            </a>
          </footer>
        </div>
      </main>
    </>
  );
}
